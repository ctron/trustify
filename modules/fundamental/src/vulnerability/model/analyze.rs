use crate::{
    advisory::model::AdvisoryHead, common::model::Score, vulnerability::model::VulnerabilityHead,
};
use serde::{Deserialize, Serialize};
use std::{collections::BTreeMap, ops::Deref};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct AnalysisRequest {
    pub purls: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, ToSchema, Default)]
pub struct AnalysisResult {
    pub details: Vec<AnalysisDetails>,
    pub warnings: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct AnalysisDetails {
    #[serde(flatten)]
    pub head: VulnerabilityHead,

    /// Map of status to advisories
    ///
    /// Allowed status values:
    /// - `affected`: Advisories that affect the package
    /// - `under_investigation`: Advisories that might affect the package, but the investigation is still ongoing
    ///
    /// Additional status values may be added in the future; see API documentation for details.
    pub status: BTreeMap<String, Vec<AnalysisAdvisory>>,
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct AnalysisAdvisory {
    #[serde(flatten)]
    pub advisory: AdvisoryHead,

    /// CVSS scores
    pub scores: Vec<Score>,
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct AnalysisResponse(pub BTreeMap<String, AnalysisResult>);

impl Deref for AnalysisResponse {
    type Target = BTreeMap<String, AnalysisResult>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
